name: oci-free-a1-retry
on:
  schedule:
    - cron: '*/5 * * * *'   # toutes 5 min
  workflow_dispatch:

jobs:
  launch:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      # ====== REMPLACER PAR TES VALEURS ======
      VM1_DISPLAY_NAME: "vm-data-prod (MongoDB + Elastic + RabbitMQ)"
      VM1_COMPARTMENT_ID: "ocid1.tenancy.oc1..aaaaaaaatcmlxf7camkxmvqxmvrpidxmbmairf2ujzevbvwmb6m2n5wbvnaa"
      VM1_SUBNET_ID: "ocid1.subnet.oc1.eu-paris-1.aaaaaaaa46kxavjyltcuuqpwb3zczopt5agsavcqovxjs6zpbuz52h2vf4zq"
      VM1_IMAGE_ID: "ocid1.image.oc1.eu-paris-1.aaaaaaaaieemjackdiwwimkllgvsmyqif7k4xj5dppg272rccxwzxujvbmja"
      VM1_OCPUS: "2"
      VM1_MEM_GB: "14"
      VM1_BOOT_SIZE_GB: "50"
      VM1_BOOT_VPUS_PER_GB: "10"
      VM1_ASSIGN_PUBLIC_IP: "false"
      VM1_SSH_AUTH_KEYS: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN23HAHpE9LVAMUg/g4PzRsXAX4qhwykbKrSCDCnVrvS toswapp-app@vm-data"

      VM2_DISPLAY_NAME: "vm-apps-prod"
      VM2_COMPARTMENT_ID: "ocid1.tenancy.oc1..aaaaaaaatcmlxf7camkxmvqxmvrpidxmbmairf2ujzevbvwmb6m2n5wbvnaa"
      VM2_SUBNET_ID: "ocid1.subnet.oc1.eu-paris-1.aaaaaaaa46kxavjyltcuuqpwb3zczopt5agsavcqovxjs6zpbuz52h2vf4zq"
      VM2_IMAGE_ID: "ocid1.image.oc1.eu-paris-1.aaaaaaaaieemjackdiwwimkllgvsmyqif7k4xj5dppg272rccxwzxujvbmja"
      VM2_OCPUS: "2"
      VM2_MEM_GB: "10"
      VM2_BOOT_SIZE_GB: "50"
      VM2_BOOT_VPUS_PER_GB: "10"
      VM2_ASSIGN_PUBLIC_IP: "false"
      VM2_SSH_AUTH_KEYS: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN23HAHpE9LVAMUg/g4PzRsXAX4qhwykbKrSCDCnVrvS toswapp-app@vm-data"

      AD_NAME: "icoc:EU-PARIS-1-AD-1"

    steps:
      - name: Setup OCI CLI
        env:
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
        run: |
          python3 -m pip install --user --upgrade oci-cli
          export PATH="$HOME/.local/bin:$PATH"
          mkdir -p ~/.oci
          printf "[DEFAULT]\nuser=%s\ntenancy=%s\nfingerprint=%s\nregion=%s\nkey_file=%s\n" \
            "$OCI_USER_OCID" "$OCI_TENANCY_OCID" "$OCI_FINGERPRINT" "$OCI_REGION" "$HOME/.oci/oci_api_key.pem" \
            > ~/.oci/config
          umask 177 && printf "%s" "$OCI_PRIVATE_KEY" > ~/.oci/oci_api_key.pem

      - name: Launch VM1 then VM2 if VM1 OK/exists
        shell: bash
        run: |
          set -euo pipefail
          log(){ printf "%s %s\n" "$(date -Is)" "$*"; }
      
          launch_vm () {
            DISPLAY_NAME="$1"; COMPARTMENT_ID="$2"; SUBNET_ID="$3"; IMAGE_ID="$4"
            OCPUS="$5"; MEM_GB="$6"; BOOT_SIZE_GB="$7"; BOOT_VPUS_PER_GB="$8"; ASSIGN_PUBLIC_IP="$9"; SSH_AUTH_KEYS="${10}"
      
            log "[$DISPLAY_NAME] start"
      
            EXISTING_STATE="$(oci compute instance list --compartment-id "$COMPARTMENT_ID" --all \
              --query "data[?\"display-name\"=='$DISPLAY_NAME'].\"lifecycle-state\" | [0]" --raw-output || true)"
            if [ -n "${EXISTING_STATE:-}" ] && [ "${EXISTING_STATE:-null}" != "null" ]; then
              log "[$DISPLAY_NAME] skip (state=$EXISTING_STATE)"
              return 0
            fi
      
            WORKDIR="$(mktemp -d)"; trap 'rm -rf "$WORKDIR"' RETURN
      
            cat > "$WORKDIR/instanceOptions.json" <<'JSON'
      {
        "areLegacyImdsEndpointsDisabled": false
      }
      JSON
      
            cat > "$WORKDIR/availabilityConfig.json" <<'JSON'
      {
        "recoveryAction": "RESTORE_INSTANCE"
      }
      JSON
      
            cat > "$WORKDIR/agentConfig.json" <<'JSON'
      {
        "isManagementDisabled": false,
        "isMonitoringDisabled": false,
        "pluginsConfig": [
          {"name":"Vulnerability Scanning","desiredState":"DISABLED"},
          {"name":"Management Agent","desiredState":"DISABLED"},
          {"name":"Custom Logs Monitoring","desiredState":"ENABLED"},
          {"name":"Compute RDMA GPU Monitoring","desiredState":"DISABLED"},
          {"name":"Compute Instance Monitoring","desiredState":"ENABLED"},
          {"name":"Compute HPC RDMA Auto-Configuration","desiredState":"DISABLED"},
          {"name":"Compute HPC RDMA Authentication","desiredState":"DISABLED"},
          {"name":"Cloud Guard Workload Protection","desiredState":"ENABLED"},
          {"name":"Block Volume Management","desiredState":"DISABLED"},
          {"name":"Bastion","desiredState":"DISABLED"}
        ]
      }
      JSON
      
            cat > "$WORKDIR/sourceDetails.json" <<JSON
      {
        "sourceType": "image",
        "imageId": "$IMAGE_ID",
        "bootVolumeSizeInGBs": $BOOT_SIZE_GB,
        "bootVolumeVpusPerGB": $BOOT_VPUS_PER_GB
      }
      JSON
      
            cat > "$WORKDIR/shapeConfig.json" <<JSON
      {
        "ocpus": $OCPUS,
        "memoryInGBs": $MEM_GB
      }
      JSON
      
            log "[$DISPLAY_NAME] launch attempt in ${AD_NAME}"
            if oci compute instance launch \
                --availability-domain "$AD_NAME" \
                --compartment-id "$COMPARTMENT_ID" \
                --display-name "$DISPLAY_NAME" \
                --shape "VM.Standard.A1.Flex" \
                --shape-config "file://$WORKDIR/shapeConfig.json" \
                --source-details "file://$WORKDIR/sourceDetails.json" \
                --availability-config "file://$WORKDIR/availabilityConfig.json" \
                --instance-options "file://$WORKDIR/instanceOptions.json" \
                --agent-config "file://$WORKDIR/agentConfig.json" \
                --subnet-id "$SUBNET_ID" \
                --assign-public-ip "$ASSIGN_PUBLIC_IP" \
                --metadata "{\"ssh_authorized_keys\":\"$SSH_AUTH_KEYS\"}"; then
              log "[$DISPLAY_NAME] launch OK"
              return 0
            else
              log "[$DISPLAY_NAME] launch FAIL"
              return 1
            fi
          }
      
          if launch_vm "$VM1_DISPLAY_NAME" "$VM1_COMPARTMENT_ID" "$VM1_SUBNET_ID" "$VM1_IMAGE_ID" \
                       "$VM1_OCPUS" "$VM1_MEM_GB" "$VM1_BOOT_SIZE_GB" "$VM1_BOOT_VPUS_PER_GB" "$VM1_ASSIGN_PUBLIC_IP" "$VM1_SSH_AUTH_KEYS"; then
            launch_vm "$VM2_DISPLAY_NAME" "$VM2_COMPARTMENT_ID" "$VM2_SUBNET_ID" "$VM2_IMAGE_ID" \
                      "$VM2_OCPUS" "$VM2_MEM_GB" "$VM2_BOOT_SIZE_GB" "$VM2_BOOT_VPUS_PER_GB" "$VM2_ASSIGN_PUBLIC_IP" "$VM2_SSH_AUTH_KEYS"
          else
            log "[gate] VM1 non créée → on ne tente pas VM2"
            exit 1
          fi
